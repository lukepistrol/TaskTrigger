{"hierarchy":{"paths":[[]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","topicSections":[{"title":"Triggers","anchor":"Triggers","identifiers":["doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/TaskTrigger","doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/PlainTaskTrigger"]},{"title":"Views","identifiers":["doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/TaskTriggerButton"],"anchor":"Views"},{"anchor":"Extended-Modules","generated":true,"title":"Extended Modules","identifiers":["doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/SwiftUICore"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger"},"metadata":{"symbolKind":"module","modules":[{"name":"TaskTrigger"}],"externalID":"TaskTrigger","title":"TaskTrigger","role":"collection","roleHeading":"Framework"},"variants":[{"paths":["\/documentation\/tasktrigger"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"abstract":[{"type":"text","text":"Attach async tasks to SwiftUI views using a trigger mechanism."}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When using Swift’s structured concurrency in SwiftUI it is good practice to"},{"text":" ","type":"text"},{"type":"text","text":"tie the tasks to the relevant view’s lifetime in order to support task"},{"text":" ","type":"text"},{"type":"text","text":"cancellation should the view be dismissed."}]},{"type":"aside","style":"note","name":"Info","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Usually a task might not take all that long that we would even care for"},{"type":"text","text":" "},{"type":"text","text":"cancellation. But imagine downloading some large amounts of data from a remote"},{"type":"text","text":" "},{"type":"text","text":"server which – depending on the network connection – could take a consiterable"},{"text":" ","type":"text"},{"text":"amount of time. When the user decides to dismiss the view it might be good to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"also cancel the task to not keep doing no longer necessary work."}]},{"type":"paragraph","inlineContent":[{"text":"Of course this does not guarantee that the child tasks will instantly stop but rather","type":"text"},{"type":"text","text":" "},{"type":"text","text":"they will be informed via "},{"code":"Task.isCancelled","type":"codeVoice"},{"type":"text","text":" that they’ve been cancelled. If or how"},{"text":" ","type":"text"},{"type":"text","text":"they handle cancellation is entirely up to the implementation of the child task."}]}]},{"anchor":"The-Problem","text":"The Problem","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"This can already be achieved by using the "},{"type":"codeVoice","code":"task(id:priority:_:)"},{"type":"text","text":" view modifier."},{"type":"text","text":" "},{"text":"However this requires additional housekeeping for the ","type":"text"},{"type":"codeVoice","code":"id"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In a primitive example where we just want to trigger some task we might use a "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" "},{"text":"for the ","type":"text"},{"code":"id","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@State var triggerTask: Bool = false","","var body: some View {","    Button(\"Do Something\") {","        triggerTask = true","    }","    .task(id: triggerTask) {","        guard triggerTask else { return }","        await someAsyncOperation()","        triggerTask = false","    }","}"]},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"We need to check that ","type":"text"},{"type":"codeVoice","code":"triggerTask"},{"type":"text","text":" is indeed "},{"type":"codeVoice","code":"true"},{"text":", and otherwise return.","type":"text"},{"type":"text","text":" "},{"text":"We also need to reset ","type":"text"},{"type":"codeVoice","code":"triggerTask"},{"text":" at the end of execution. Otherwise another","type":"text"},{"text":" ","type":"text"},{"text":"tap wouldn’t trigger the ","type":"text"},{"code":"task(id:priority:_:)","type":"codeVoice"},{"type":"text","text":" again."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first step is crucial becuase we would trigger the task again from in itself"},{"text":" ","type":"text"},{"text":"when we reset ","type":"text"},{"type":"codeVoice","code":"triggerTask"},{"text":" at the end.","type":"text"}]}]},{"inlineContent":[{"text":"This makes even more sense in a more complicated example where we have a list of views","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where we would like to do something based on some identifier:"}],"type":"paragraph"},{"type":"codeListing","code":["@State var triggerTaskId: Int?","","var body: some View {","    List(0..<10) { index in","        Button(\"Item \\(index)\") {","            triggerTaskId = index","        }","    }","    .task(id: triggerTaskId) {","        guard let triggerTaskId else { return }","        await someAsyncOperation(for: triggerTaskId)","        triggerTaskId = nil","    }","}"],"syntax":"swift"},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"In this case we have an optional integer and we set it to the index of the button","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the list once pressed. We need to unwrap the optional value and reset it to "},{"type":"codeVoice","code":"nil"},{"text":" afterwards.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This approach, while it really works well, comes with a lot of overhead directly in our view."},{"type":"text","text":" "},{"text":"Also we have to call the state value directly from within our task which might be cumbersome when we","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"hold the state in a view model."}]},{"level":2,"type":"heading","text":"The Solution","anchor":"The-Solution"},{"type":"paragraph","inlineContent":[{"text":"To make things simpler on the caller’s side let’s wrap all of this functionality inside","type":"text"},{"type":"text","text":" "},{"text":"a simple type ","type":"text"},{"identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/TaskTrigger","type":"reference","isActive":true},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["@State var trigger = TaskTrigger<Int>()","","var body: some View {","    List(0..<10) { index in","        Button(\"Item \\(index)\") {","            trigger.trigger(value: index)","        }","    }","    .task($trigger) { index in","        await someAsyncOperation(for: index)","    }","}"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We declare a new state variable "},{"code":"trigger","type":"codeVoice"},{"text":" and initialize the ","type":"text"},{"type":"codeVoice","code":"TaskTrigger"},{"text":" of type ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"In our button we call the ","type":"text"},{"type":"reference","identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/TaskTrigger\/trigger(value:id:)","isActive":true},{"text":" method on our ","type":"text"},{"type":"codeVoice","code":"trigger"},{"type":"text","text":" and pass in our value."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"We attach a new variant of the "},{"code":"task","type":"codeVoice"},{"text":" view modifier to our view and bind it to our ","type":"text"},{"code":"trigger","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The body will only execute when the ","type":"text"},{"code":"trigger","type":"codeVoice"},{"type":"text","text":" was triggered. The value we passed into the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/TaskTrigger\/trigger(value:id:)","isActive":true},{"type":"text","text":" method earlier gets passed into the closure as an argument."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"All cancellation related handling, sanity checking, as well as resetting the state is handled"},{"text":" ","type":"text"},{"type":"text","text":"automatically behind the scenes."}]}]}],"type":"orderedList"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You might wonder why there’s an optional parameter "},{"code":"id","type":"codeVoice"},{"text":" on the ","type":"text"},{"type":"reference","identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/TaskTrigger\/trigger(value:id:)","isActive":true},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"By default this will create a new "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":" whenever the method is called. This means we can tap the"},{"type":"text","text":" "},{"text":"same button multiple times and prior operations will get cancelled if they are still running.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In case you don’t want that to happen explicitly set the "},{"type":"codeVoice","code":"id"},{"text":" parameter and it won’t cancel","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"prior operations since both the "},{"code":"value","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"id"},{"type":"text","text":" are still the same."}],"type":"paragraph"}],"style":"note","name":"Info","type":"aside"},{"inlineContent":[{"type":"text","text":"For triggers that don’t need to attach a value, we can simply use "},{"identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/PlainTaskTrigger","type":"reference","isActive":true},{"text":" (which is a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"typealias for "},{"code":"TaskTrigger<Bool>","type":"codeVoice"},{"type":"text","text":"):"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@State var trigger = PlainTaskTrigger()","","var body: some View {","    Button(\"Do Something\") {","        trigger.trigger()","    }","    .task($trigger) {","        await someAsyncOperation()","    }","}"]},{"type":"heading","level":3,"text":"TaskTriggerButton","anchor":"TaskTriggerButton"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make it even simpler to use when using a "},{"type":"reference","identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/TaskTrigger","isActive":true},{"type":"text","text":" with a button, we can also use"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/TaskTriggerButton","isActive":true},{"text":". The following example is equivalent to the previous example:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["TaskTriggerButton(\"Do Something\") {","    await someAsyncOperation()","}"]}]}],"references":{"doc://tasktrigger.TaskTrigger/documentation/TaskTrigger/PlainTaskTrigger":{"navigatorTitle":[{"text":"PlainTaskTrigger","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PlainTaskTrigger"}],"title":"PlainTaskTrigger","identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/PlainTaskTrigger","type":"topic","url":"\/documentation\/tasktrigger\/plaintasktrigger","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Trigger async tasks attached to SwiftUI views with support for cancellation."}]},"doc://tasktrigger.TaskTrigger/documentation/TaskTrigger/SwiftUICore":{"role":"collection","kind":"symbol","identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/SwiftUICore","url":"\/documentation\/tasktrigger\/swiftuicore","type":"topic","abstract":[],"title":"SwiftUICore"},"doc://tasktrigger.TaskTrigger/documentation/TaskTrigger/TaskTrigger/trigger(value:id:)":{"abstract":[{"type":"text","text":"Triggers the tasks associated with this "},{"identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/TaskTrigger","isActive":true,"type":"reference"},{"text":" and passes along a value of type ","type":"text"},{"type":"codeVoice","code":"Value"},{"text":".","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"trigger","kind":"identifier"},{"text":"(","kind":"text"},{"text":"value","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:11TaskTriggerAAV5Valuexmfp"},{"text":", ","kind":"text"},{"text":"id","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UUID","preciseIdentifier":"s:10Foundation4UUIDV","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/TaskTrigger\/trigger(value:id:)","type":"topic","title":"trigger(value:id:)","url":"\/documentation\/tasktrigger\/tasktrigger\/trigger(value:id:)","role":"symbol"},"doc://tasktrigger.TaskTrigger/documentation/TaskTrigger/TaskTriggerButton":{"identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/TaskTriggerButton","navigatorTitle":[{"text":"TaskTriggerButton","kind":"identifier"}],"kind":"symbol","title":"TaskTriggerButton","abstract":[{"type":"text","text":"A "},{"code":"Button","type":"codeVoice"},{"type":"text","text":" that triggers an async task that is bound to the button using a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/TaskTrigger"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"TaskTriggerButton","kind":"identifier"}],"type":"topic","url":"\/documentation\/tasktrigger\/tasktriggerbutton","role":"symbol"},"doc://tasktrigger.TaskTrigger/documentation/TaskTrigger":{"kind":"symbol","title":"TaskTrigger","type":"topic","url":"\/documentation\/tasktrigger","identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger","role":"collection","abstract":[{"text":"Attach async tasks to SwiftUI views using a trigger mechanism.","type":"text"}]},"doc://tasktrigger.TaskTrigger/documentation/TaskTrigger/TaskTrigger":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/tasktrigger.TaskTrigger\/documentation\/TaskTrigger\/TaskTrigger","url":"\/documentation\/tasktrigger\/tasktrigger","type":"topic","title":"TaskTrigger","abstract":[{"text":"Trigger async tasks attached to SwiftUI views with support for cancellation.","type":"text"}],"navigatorTitle":[{"text":"TaskTrigger","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"TaskTrigger","kind":"identifier"}]}}}